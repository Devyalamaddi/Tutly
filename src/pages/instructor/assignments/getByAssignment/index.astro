---
import RootLayout from '@/layouts/RootLayout.astro'
import NoDataFound from '@/components/NoDataFound'
import db from '@/lib/db'
import SingleAssignmentBoard from '@/pages/mentor/getByAssignment/_components/assignmentBoard'

type Props = {

}

const {} = Astro.props


const currentUser = Astro.locals.user;
if (!currentUser) return null;

  let courses = await db.course.findMany({
    where: {
      enrolledUsers: {
        some: {
          username: currentUser.username,
        },
      },
    },
    include: {
      classes: true,
      createdBy: {
        select: {
          id: true,
          username: true,
          name: true,
          image: true,
          email: true,
          role: true,
          createdAt: true,
          updatedAt: true,
        },
      },
      _count: {
        select: {
          classes: true,
        },
      },
      courseAdmins: {
        select: {
          id: true,
          username: true,
          name: true,
          image: true,
          email: true,
          role: true,
          createdAt: true,
          updatedAt: true,
        },
      },
    },
  });

  courses.forEach((course) => {
    course.classes.sort((a, b) => {
      return Number(a.createdAt) - Number(b.createdAt);
    });
  });

  if (currentUser.role !== "INSTRUCTOR") {
    courses = [];
  }



const coursesWithAssignments = await db.course.findMany({
    where: {
      id: {
        in: courses.map((course) => course.id),
      },
    },
    select: {
      id: true,
      classes: {
        select: {
          attachments: {
            where: {
              attachmentType: "ASSIGNMENT",
            },
            include: {
              class: true,
              submissions: {
                include: {
                  points: true,
                },
              },
            },
          },
        },
        orderBy: {
          createdAt: "asc",
        },
      },
    },
  });

---

<RootLayout title='Get By Assignments'>
    <div class="flex flex-col gap-4 py-2 md:mx-14 md:px-8">
        <div>
          <h1 class="m-2 rounded-lg bg-gradient-to-r from-blue-600 to-sky-500 py-2 text-center text-xl font-semibold">
            Students
          </h1>
          {courses && courses.length > 0 ? (
            <>
              <SingleAssignmentBoard courses={courses} assignments={coursesWithAssignments}  client:load/>
            </>
          ) : (
            <NoDataFound message="No students found!" client:load />
          )}
        </div>
      </div>
</RootLayout>