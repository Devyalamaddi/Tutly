---
import "@/styles/globals.css";
import { ViewTransitions } from "astro:transitions";
import { Sidebar } from "./Sidebar.tsx";
import { Toaster } from "react-hot-toast";
import { SidebarItem } from "@/components/Sidebar";

interface Props {
  title?: string;
  sideBarItems?: SidebarItem[];
  isSidebarOpen?: boolean;
}

const { title = "Tutly" } = Astro.props;
const { sideBarItems, isSidebarOpen } = Astro.props;

const pathname = Astro.url.pathname;
const user = Astro.locals.user;

// @ts-ignore
globalThis.pathname = pathname;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script is:inline>
      const getTheme = () => {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      }

      const theme = getTheme();
      document.documentElement.classList[theme === "dark" ? "add" : "remove"]("dark");
    </script>
  </head>
  <body>
    <Toaster client:load />
    {user && (
      <Sidebar 
        client:load 
        pathname={pathname} 
        user={user} 
        sideBarItems={sideBarItems ?? []} 
        isSidebarOpen={isSidebarOpen!}
      >
        <slot />
      </Sidebar>
    )}
    <ViewTransitions fallback="animate" />
  </body>
</html>
