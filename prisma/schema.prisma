// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  INSTRUCTOR
  MENTOR
  STUDENT
}

model User {
  id       String  @id @default(uuid())
  name     String?
  username String? @unique
  email    String? @unique
  image    String?
  password String?
  mobile   String?
  role     Role    @default(STUDENT)

  lastLogin     DateTime[]
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account        Account[]
  course         Course[]
  userAssignment userAssignment[]
  enrolledUsers  EnrolledUsers[]
  profile        Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  section      String?
  branch       String?
  academicYear String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id            String          @id @default(uuid())
  createdById   String
  createdBy     User            @relation(fields: [createdById], references: [id])
  title         String
  enrolledUsers EnrolledUsers[]
  classes       Class[]

  startDate DateTime  @default(now())
  endDate   DateTime?

  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EnrolledUsers {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  startDate DateTime  @default(now())
  endDate   DateTime?

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Class {
  id          String       @id @default(uuid())
  title       String       @default("class")
  video       Video        @relation(fields: [videoId], references: [id])
  attachments Attachment[]
  courseId    String?
  course      Course?      @relation(fields: [courseId], references: [id])
  videoId     String
}

enum VideoType {
  YOUTUBE
  ZOOM
}

model Video {
  id         String    @id @default(uuid())
  videoLink  String?
  videoType  VideoType
  timeStamps Json?
  class      Class[]
}

enum attachmentType {
  ASSIGNMENT
  GITHUB
  ZOOM
  OTHERS
}

model Attachment {
  id             String           @id @default(uuid())
  title          String           @default("Attachment")
  details        Json?
  attachmentType attachmentType
  link           String?
  userAssignment userAssignment[]
  classId        String?
  class          Class?           @relation(fields: [classId], references: [id])
}

model userAssignment {
  id           String @id @default(uuid())
  userId       String
  assignedUser User   @relation(fields: [userId], references: [id])

  attachmentId String
  assignment   Attachment @relation(fields: [attachmentId], references: [id])

  dueDate DateTime
  points  Point[]

  isSubmitted Boolean @default(false)
  overallFeedback String?
}

enum pointCategory {
  RESPOSIVENESS
  STYLING
  OTHER
}

model Point {
  id               String          @id @default(uuid())
  category         pointCategory
  feedback         String?
  score            Int             @default(0)
  userAssignment   userAssignment? @relation(fields: [userAssignmentId], references: [id])
  userAssignmentId String?
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([provider, providerAccountId])
}
